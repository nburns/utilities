#!/usr/bin/env python2
import sys
import inflection
import argparse

def get_args():
    a = argparse.ArgumentParser()
    a.add_argument('-o', '--omit-empty', action='store_true', default=False)
    a.add_argument('-j', '--json-only', action='store_true', default=False)
    a.add_argument('-b', '--bson-only', action='store_true', default=False)
    return a.parse_args()


def main():
    args = get_args()

    lines = [l for l in sys.stdin.read().split('\n')]

    out = []

    for line in lines:
        parts = get_parts_of_line(line)
        if any(parts):
            name, kind, tags = parts
            if tags:
                out.append(' '.join(parts))
            else:
                tags = make_tags(name, args)
                out.append('{} {} {}'.format(name, kind, tags))

    print '\n'.join(out)


def get_parts_of_line(line):
    if not line:
        return None, None, None

    parts = line.split()
    if len(parts) == 3:
        name, kind, tags = parts
    if len(parts) == 2:
        name, kind = parts
        tags = None

    return name, kind, tags


def make_tags(name, args):
    extra = ',omitempty' if args.omit_empty else ''
    json_tag = json(name, extra) if not args.bson_only else ''
    bson_tag = bson(name, extra) if not args.json_only else ''
    return '`{}{}`'.format(json_tag, bson_tag)


def bson(name, extra):
    return 'bson:"{}{}"'.format(
        inflection.underscore(name),
        extra)

    
def json(name, extra):
    return 'json:"{}{}"'.format(
        inflection.camelize(name, uppercase_first_letter=False),
        extra)


if __name__ == '__main__':
    main()
