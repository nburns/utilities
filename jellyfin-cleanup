#!/usr/bin/env python3
import requests
from pprint import pp
import os
from functools import partialmethod
import curlify

BASE_URL = os.environ['JELLYFIN_BASE_URL']
API_KEY = os.environ['JELLYFIN_API_KEY']
USER_ID = os.environ['JELLYFIN_USER_ID']
DELETE_AFTER_PLAY_LIBRARY = os.environ['JELLYFIN_DELETE_AFTER_PLAY_LIBRARY']
DO_DELETES = os.environ.get('JELLYFIN_DO_DELETES') == 'true'


class JellyfinAPI:
    def __init__(self, base_url, api_key, user_id):
        self.api_key = api_key
        self.base_url = base_url
        self.user_id = user_id

    @property
    def headers(self):
        return {
            'X-Emby-Authorization': f'Mediabrowser Token={self.api_key}',
        }

    def request(self, method_name, path, **kwargs):
        method = getattr(requests, method_name)
        response = method(self.base_url + path, headers=self.headers, params=kwargs)
        try:
            response.raise_for_status()
        except:
            print(curlify.to_curl(response.request))
            raise

        if response.content:
            try:
                return response.json()
            except:
                print('broke on:', response.content)
                raise

    get = partialmethod(request, 'get')
    delete = partialmethod(request, 'delete')

    def top_level_items(self):
        return self.get('/Items', UserId=self.user_id, mediaTypes=['CollectionFolder'])['Items']

    def container_to_delete_from(self):
        return next(item for item in client.top_level_items() if item['Name'] == DELETE_AFTER_PLAY_LIBRARY)

    def items_in_container(self, id):
        return self.get('/Items', UserId=self.user_id, mediaTypes=['Video'], enableUserData='true', ParentId=id)['Items']

    def delete_item(self, id):
        if not DO_DELETES:
            print(f'not deleting {id}')
            return
        return self.delete(f'/Items/{id}')



client = JellyfinAPI(BASE_URL, API_KEY, USER_ID)

container = client.container_to_delete_from()
print(f'Found container: {container["Name"]}')

for item in client.items_in_container(container['Id']):
    if item['UserData']['Played']:
        print(f'Deleting item: {item["Name"]}')
        client.delete_item(item['Id'])
