#!/usr/bin/env python3
from dataclasses import dataclass
from urllib.parse import urlparse, unquote
from inspect import cleandoc

import argparse
import os
import re
import json
import sys
import subprocess

def manager_databases():
    out = subprocess.check_output('op item list --categories Database --format json'.split(' '))
    return json.loads(out.decode())

def op_item(id):
    out = subprocess.check_output('op item get --format json'.split(' ') + [id])
    return json.loads(out.decode())

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('url', nargs="?", default=None, help="A database connection url")
    parser.add_argument('--fdw', default=False, action='store_true', help="generate psql fdw commands for the url")
    parser.add_argument('--connect', default=True, action='store_true', help="open an interactive session to the db")
    parser.add_argument('--ping', default=False, action='store_true', help="establish a connection then close it")
    parser.add_argument('--ping-command', default="select count(*) from information_schema.tables")
    parser.add_argument('--connect-timeout', default="2", type=int)
    parser.add_argument('--read-timeout', default="2", type=int)
    parser.add_argument('--one-pw', help="connect to a database from 1 password by item name", choices=[d['title'] for d in manager_databases()])

    parser.add_argument('--json', default=False, action='store_true', help="output parameters as json")

    args = parser.parse_args()

    if args.one_pw:
        id = next(d for d in manager_databases() if d['title'] == args.one_pw)['id']
        item = op_item(id)
        fields = {f['label']: f.get('value') for f in item['fields']}
        connection = Connection(
            host=fields['server'],
            raw_port=fields['port'],
            database=fields['database'],
            raw_engine=fields['type'],
            user=fields['username'],
            password=fields['password'],
        )


    else:
        url = urlparse(args.url)
        netloc = parse_netloc(url.netloc)

        connection = Connection(
            host=url.hostname,
            raw_port=url.port,
            database=url.path.lstrip('/'),
            raw_engine=url.scheme,
            user=netloc.user,
            password=netloc.password,
            url=args.url,
        )

    if args.fdw:
        print(connection.generate_fdw())
        return

    if args.json:
        print(json.dumps(connection.to_dict))
        return

    if args.ping:
        connection.ping(args.ping_command, args.connect_timeout, args.read_timeout)
        return


    if args.connect:
        connection.connect() # process replacement



@dataclass
class Connection:
    user: str = None
    host: str = None
    raw_port: int = None
    password: str = None
    database: str = None
    raw_engine: str = None
    url: str = None

    @property
    def port(self):
        return self.raw_port or {
            'postgres': 5432,
            'mysql': 3306
        }[self.engine]

    @property
    def engine(self):
        if "post" in self.raw_engine or "psql" in self.raw_engine:
            return 'postgres'

        if "mysql" in self.raw_engine:
            return 'mysql'

    def ping(self, command, connect_timeout, read_timeout):
        if self.engine == 'mysql':
            try:
                import MySQLdb
            except ImportError as e:
                raise RuntimeError("pip install mysql") from e

            kwargs = dict(host=self.host, user=self.user, db=self.database)
            if self.password:
                kwargs['passwd'] = self.password
            try:
                connection = MySQLdb.connect(**kwargs, connect_timeout=connect_timeout, read_timeout=read_timeout)
                cursor = connection.cursor()
                cursor.execute(command)
                list(cursor.fetchall())
                connection.close()
                print('connected')
            except MySQLdb.OperationalError:
                print('not connected')
                sys.exit(1)

        if self.engine == 'postgres':
            raise NotImplemented("not yet")

    @property
    def wrapper(self):
        return {
            'postgres': 'postgres_fdw',
            'mysql': 'mysql_fdw',
        }[self.engine]

    def generate_fdw(self):
        server_name = self.database

        def format_options(options):
            formatted = []
            for key in options:
                formatted.append(f"{key} '{options[key]}'")
            return ', '.join(formatted)

        return cleandoc(f'''
            CREATE EXTENSION IF NOT EXISTS citext;
            CREATE EXTENSION IF NOT EXISTS postgres_fdw;
            CREATE EXTENSION IF NOT EXISTS mysql_fdw;

            DROP SERVER IF EXISTS "{server_name}" CASCADE;

            CREATE SERVER "{server_name}" FOREIGN DATA WRAPPER {self.wrapper} options (
                {format_options(self.fdw_options['server'])}
            );

            CREATE USER MAPPING FOR CURRENT_USER SERVER "{server_name}" options (
                {format_options(self.fdw_options['user'])}
            );

            DROP SCHEMA IF EXISTS "{self.schema_name}";
            CREATE SCHEMA "{self.schema_name}";

            IMPORT FOREIGN SCHEMA "{self.foreign_schema_name}"
            EXCEPT (
            authorized_user_list,
                all_permissions, column_permissions, database_permissions,
                function_permissions, permission_target, schema_permissions,
                sequence_permissions, table_permissions, view_permissions
            )
            FROM SERVER "{server_name}" INTO "{self.schema_name}";
        ''')

    @property
    def fdw_options(self):
        return {
          'postgres': {
              'server': {
                  'host': self.host,
                  'dbname': self.database,
                  'port': self.port,
                  'updatable': 'false',
                  'truncatable': 'false',
                  'async_capable': 'true',
                  'fetch_size': 1000,
              },
              'user': {
                  'user': self.user,
                  'password': self.password,
              },
          },
          'mysql': {
              'server': {
                  'host': self.host,
                  'port': self.port,
              },
              'user': {
                  'username': self.user,
                  'password': self.password,
              },
          },
        }[self.engine]

    @property
    def schema_name(self):
        return self.database

    @property
    def foreign_schema_name(self):
        return {
            'postgres': 'public',
            'mysql': self.database,
        }[self.engine]

    def connect(self):
        types = {
            'mysql': mysql,
            'postgres': postgres,
        }
        args = types[self.engine](self)

        print(args)
        print(' '.join(args))

        os.execvp(self.engine, args)

    @property
    def to_dict(self):
        return {
            'engine': self.engine,
            'user': self.user,
            'password': self.password,
            'host': self.host,
            'port': self.port,
            'database': self.database,
        }


def parse_netloc(netloc_str):
    @dataclass
    class Netloc:
        user: str = None
        password: str = None

    results = re.search(
            r'^(?P<user>[^:]+):(?P<password>[^@]+)?@\S+$',
        netloc_str)

    password = results.group("password")

    return Netloc(
        user=results.group('user'),
        password=unquote(password) if password else None)


def mysql(connection):
    return [
        'mysql',
        '--host', connection.host,
        '--user', connection.user,
        '--port', str(connection.port or 3306),
        '--database', connection.database,
        f"-p{connection.password}" if connection.password else '',
    ]


def postgres(connection):
    return ['psql', connection.url]


if __name__ == '__main__':
    main()
