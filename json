#!/usr/bin/env python3
import sys
import functools
import argparse

try:
    import simplejson
except ImportError:
    sys.exit('pip install simplejson')

def error_print(data, error):
    stderr = functools.partial(print, file=sys.stderr)

    stderr('\n{}\n'.format(error))
    line = data.split('\n')[error.lineno - 1]
    error_line = [
            '^' if error.colno - 1 == i else '-' for i, c in enumerate(line)]
    stderr(line)
    stderr(''.join(error_line))


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-k', '--keys-only', action='store_true', default=False,
        help='print top level keys')
    parser.add_argument('-d', '--data', type=str, default=None,
        help='pass a json string as an argument')
    parser.add_argument('-u', '--unescape', action='store_true', default=False,
        help='unescape input before deserialization')
    parser.add_argument('-c', '--compact', action='store_true', default=False,
        help='print compactly (do not pretty print)')
    args = parser.parse_args()

    if args.data:
        data = args.data
    else:
        data = sys.stdin.read()

    if args.unescape:
        data = str.encode(data).decode('unicode_escape')

    try:
        parsed = simplejson.loads(data)
    except simplejson.JSONDecodeError as e:
        error_print(data, e)
        sys.exit(71)

    if args.keys_only:
        for k in parsed.keys():
            print(k)
    else:
        output_options = {
            'ensure_ascii': True,
            'sort_keys': True,
        }

        if not args.compact:
            output_options.update({
                'indent': 4,
                'separators': (',', ': '),
            })


        simplejson.dump(parsed, sys.stdout, **output_options)
        print()
        
if __name__ == '__main__':
    main()
