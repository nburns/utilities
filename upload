#!/usr/bin/env ruby
require 'open3'
require 'rollbar'
require 'dotenv'
require 'logger'
require 'pry'

LOG = Logger.new(File.open("#{ENV.fetch('HOME')}/upload.log", "a+"))

class UploadFailure < StandardError
  def initialize(msg, attrs)
    super(msg)
    @attrs = attrs
  end

  attr_reader :attrs
end

def torrent_dir
  ENV.fetch('TR_TORRENT_DIR')
end

def torrent_name
  ENV.fetch('TR_TORRENT_NAME')
end

def torrent_path
  "#{torrent_dir}/#{torrent_name}"
end

def size(path)
  path = File.expand_path(path)
  return File.size(path) if File.file?(path)
  if File.directory?(path)
    Dir["#{path}/**/*"].select { |f| File.file?(f) }.sum { |f| File.size(f) }
  else
    raise ArgumentError, "#{path} is not a file or directory"
  end
end

def with_reporting
  yield
rescue StandardError => e
  Rollbar.error(e, **(e.respond_to?(:attrs) ? e.attrs : {}))
  raise e
end

def upload
  size = size(torrent_path)
  started = Time.now

  attrs = {
    torrent_path: torrent_path, torrent_name: torrent_name,
    size: size, size_mb: size/1000.0,
    started: started,
  }

  puts 'started'
  Rollbar.info("started upload", attrs)

  stdout, stderr, status = Open3
    .capture3(File.expand_path("~/dropbox_uploader.sh"), "upload", torrent_path, torrent_name)

  finished = Time.now
  seconds = finished - started

  attrs.merge!(
    stdout: stdout, stderr: stderr, status: status.exitstatus,
    mpbs: size / seconds / 1000.0,
    minutes: seconds / 60, finished: finished,
  )

  if status.exitstatus.zero?
    puts 'finished'
    Rollbar.info("finished upload", attrs)
  else
    puts 'failed'
    Rollbar.info("failed to upload", attrs)
  end

end

begin
  Dotenv.load("#{ENV.fetch('HOME')}/.env")
  Rollbar.configure do |config|
    config.access_token = ENV.fetch('ROLLBAR_ACCESS_TOKEN')
  end
  with_reporting { upload }
rescue StandardError => e
  LOG.error(e)
  raise e
end
