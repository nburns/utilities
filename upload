#!/usr/bin/env ruby
require 'open3'
require 'rollbar'
require 'dotenv'
require 'logger'

LOG = Logger.new(File.open("#{ENV.fetch('HOME')}/upload.log", "a+"))

class UploadFailure < StandardError; end

def torrent_dir
  ENV.fetch('TR_TORRENT_DIR')
end

def torrent_name
  ENV.fetch('TR_TORRENT_NAME')
end

def torrent_path
  "#{torrent_dir}/#{torrent_name}"
end

def size(path)
  stdout, stderr, status = Open3.capture3("du -s \"#{path}\" | cut -f 1")
  if status.exitstatus.zero?
    stdout.strip.to_i
  else
    raise stderr
  end
end

def with_reporting
  yield
rescue StandardError => e
  Rollbar.error(e)
  raise e
end

def upload
  size = size(torrent_path)
  started = Time.now

  Rollbar.info("started upload",
    torrent_name: torrent_name, size: size)

  stdout, stderr, status = Open3.capture3("~/dropbox_uploader.sh upload #{torrent_path} #{torrent_name}")

  unless status.exitstatus.zero?
    Rollbar.error("failed to upload",
      stdout: stdout, stderr: stderr, status: status.exitstatus, torrent_name: torrent_name)
    raise UploadFailure, "failed to upload"
  end

  seconds = Time.now - started
  mbps = size / seconds / 1000.0
  minutes = seconds / 60

  Rollbar.info("finished upload",
    torrent_name: torrent_name, size: size, mbps: mbps, minutes: minutes,
    stdout: stdout, stderr: stderr)
end

def configure_rollbar
  Rollbar.configure do |config|
    config.access_token = ENV.fetch('ROLLBAR_ACCESS_TOKEN')
  end
end

begin
  Dotenv.load("#{ENV.fetch('HOME')}/.env")
  configure_rollbar
  with_reporting { upload }
rescue StandardError => e
  LOG.error(e)
  raise e
end
