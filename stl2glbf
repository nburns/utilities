#!/usr/bin/env python
import bpy
import mathutils
import argparse
from pathlib import Path
import tempfile
import shutil
from math import radians


def float_radians(s):
    return radians(float(s))

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--infile", type=Path, default="/dev/stdin")
    parser.add_argument("-o", "--outfile", type=Path, default="/dev/stdout")
    parser.add_argument("--rx", type=float_radians, default=90, help="rotate around x (deg)")
    parser.add_argument("--ry", type=float_radians, default=0, help="rotate around y (deg)")
    parser.add_argument("--rz", type=float_radians, default=0, help="rotate around z (deg)")
    parser.add_argument("--red", type=float, default=0, help="red component")
    parser.add_argument("--green", type=float, default=0, help="green component")
    parser.add_argument("--blue", type=float, default=0, help="blue component")
    args = parser.parse_args()
    print(args)

    bpy.ops.wm.read_factory_settings(use_empty=True)
    bpy.context.scene.render.engine = 'CYCLES'
    bpy.context.scene.cycles.feature_sets = "EXPERIMENTAL"
    bpy.context.scene.cycles.device = "GPU"

    bpy.ops.import_mesh.stl(filepath=str(args.infile))
    obj = bpy.context.object

    obj.rotation_euler = mathutils.Euler((args.rx, args.ry, args.rz))

    material = bpy.data.materials.new(name="material")
    obj.data.materials.append(material)

    material.use_nodes = True
    nodes = material.node_tree.nodes

    principled = nodes["Principled BSDF"]
    principled.inputs['Base Color'].default_value = (args.red, args.green, args.blue, 1)
    print(tuple(principled.inputs['Base Color'].default_value))

    # appends its own extension :( so we copy the result
    temp = tempfile.NamedTemporaryFile(suffix=".glb")
    bpy.ops.export_scene.gltf(filepath=temp.name)
    shutil.copy(temp.name, args.outfile)


if __name__ == "__main__":
    main()
